{"version":3,"sources":["components/settings/Settings.module.css","components/Header/Header.jsx","utils/colorCreator.js","utils/AudioPlayer.js","components/settings/Settings.jsx","components/FieldGame/FieldGameView.jsx","components/FieldGame/FieldGame.jsx","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js","components/FieldGame/FieldGame.module.css"],"names":["module","exports","Header","style","marginTop","colorCreator","getColors","el","theme","r","g","b","a","getFieldStyle","fieldSize","width","height","audioPlayer","setFileAndPlay","audioEl","file","src","URL","createObjectURL","load","play","_data","createAnalyser","this","contextNew","AudioContext","src2","createMediaElementSource","analyser","connect","destination","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","Settings","props","className","styles","settings","type","onChange","e","setField","target","value","name","setTheme","FieldGameView","setMusic","audioElRef","fieldWidth","setFieldSize","newData","cells","map","i","newColor","key","backgroundColor","cell","accept","input","ref","controls","audio","wrapper","container","FieldGame","useRef","useState","data","setData","slice","renderFrame","async","requestAnimationFrame","getByteFrequencyData","Array","from","files","current","App","Boolean","window","location","hostname","match","initialState","reducer","state","action","newOpacityElement","num","Math","floor","random","newArray","colors","brightness","color","arrayColors","length","isMusicPlay","reducers","combineReducers","main","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c730cfa0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__8hZQ-\"};","import React from 'react';\r\n// import './App.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1 style={{marginTop: 0}}>LIGHT ORGAN</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","const colorCreator = {\r\n    getColors(el, theme) {\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n        let a = 255 / el;\r\n\r\n        switch (theme) {\r\n            case 'red-blue':\r\n                r = (el < 40) ? el : 0;\r\n                r = (el > 75 && el < 120) ? el : r;\r\n                r = (el > 160 && el < 210) ? el : r;\r\n                g = (el > 20 && el < 70) ? el : 0;\r\n                g = (el > 100 && el < 150) ? el : g;\r\n                g = (el > 190 && el < 240) ? el : g;\r\n                b = (el > 50 && el < 95) ? el : 0;\r\n                b = (el > 130 && el < 180) ? el : b;\r\n                b = (el > 220) ? el : b;\r\n                break;\r\n            case 'blue-green':\r\n                r = (el < 30) ? el : 0;\r\n                r = (el > 85 && el < 110) ? el : r;\r\n                r = (el > 170 && el < 200) ? el : r;\r\n                g = (el > 30 && el < 60) ? el : 0;\r\n                g = (el > 110 && el < 140) ? el : g;\r\n                g = (el > 200 && el < 230) ? el : g;\r\n                b = (el > 60 && el < 85) ? el : 0;\r\n                b = (el > 140 && el < 170) ? el : b;\r\n                b = (el > 230) ? el : b;\r\n                break;\r\n            default:\r\n                r = 255 - el;\r\n                g = el;\r\n                b = 255 - el;\r\n\r\n\r\n        }\r\n\r\n        let newColor = \"rgb(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        return newColor;\r\n\r\n    },\r\n    getFieldStyle(fieldSize) {\r\n        fieldSize = +fieldSize;\r\n\r\n        switch (fieldSize){\r\n            case 102:\r\n                return { width: 10*64+ 'px', height: 2*64 + 'px'};\r\n            case 55:\r\n                return { width: 5*64+ 'px', height: 5*64 + 'px' };\r\n            default:\r\n                return {width: 16*64 + 'px', height: 9*64 + 'px'};\r\n        }\r\n    }\r\n}\r\n\r\nexport default colorCreator;","const audioPlayer = {\r\n    setFileAndPlay(audioEl, file) {\r\n        audioEl.src = URL.createObjectURL(file);\r\n        audioEl.load();\r\n        audioEl.play();\r\n    },\r\n\r\n    _data: null,\r\n\r\n    createAnalyser(audioEl) {\r\n        if (this._data) return this._data;\r\n\r\n        let contextNew = new AudioContext();\r\n        //setContext(contextNew);\r\n        //pressButton(true);\r\n        let src2 = contextNew.createMediaElementSource(audioEl)\r\n        let analyser = contextNew.createAnalyser();\r\n        src2.connect(analyser);\r\n        analyser.connect(contextNew.destination);\r\n        analyser.fftSize = 512;\r\n        let bufferLength = analyser.frequencyBinCount;\r\n        let dataArray = new Uint8Array(bufferLength);\r\n\r\n        //audioEl.play();\r\n\r\n        this._data = {\r\n            analyser,\r\n            dataArray\r\n        };\r\n\r\n        return this._data;\r\n    }\r\n}\r\n\r\nexport default audioPlayer;","import React from 'react';\r\nimport styles from './Settings.module.css'\r\n\r\nfunction Settings(props) {\r\n\r\n    return (\r\n        <article className={styles.settings}>\r\n            <legend><h3>Choose field:</h3></legend>\r\n                <label>\r\n                    <h3>10*2</h3>\r\n                    <input type='radio' onChange={(e) => props.setField(e.target.value)}\r\n                           name='field'\r\n                           value='102'/>\r\n                </label>\r\n            <label>\r\n                <h3>5*5</h3>\r\n                <input type='radio' onChange={(e) => props.setField(e.target.value)}\r\n                       name='field'\r\n                       value='55'/>\r\n            </label>\r\n\r\n            <legend><h3>Choose theme:</h3></legend>\r\n            <label>\r\n                <h3>Red-blue</h3>\r\n                <input type='radio' onChange={(e) => props.setTheme(e.target.value)}\r\n                       name='theme'\r\n                       value='red-blue'/>\r\n            </label>\r\n            <label>\r\n                <h3>Blue-green</h3>\r\n                <input type='radio' onChange={(e) => props.setTheme(e.target.value)}\r\n                       name='theme'\r\n                       value='blue-green'/>\r\n            </label>\r\n\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport styles from './FieldGame.module.css';\r\nimport Settings from \"../settings/Settings\";\r\nimport colorCreator from \"../../utils/colorCreator\";\r\n\r\nfunction FieldGameView({setMusic, audioElRef, fieldWidth, setFieldSize, setTheme, newData, theme}) {\r\n\r\n    let cells = newData.map((el, i) => {\r\n        let newColor = colorCreator.getColors(el, theme);\r\n        return <div key={i}\r\n                    style={{backgroundColor: newColor,}}\r\n            // style={{backgroundColor: el.color, opacity: el.brightness}}\r\n                    className={styles.cell}>\r\n        </div>\r\n    });\r\n\r\n\r\n   return (\r\n        <article>\r\n            <input type='file' accept='audio/*' onChange={setMusic} className={styles.input}/>\r\n            <audio ref={audioElRef} controls={true} className={styles.audio}/>\r\n            <section className={styles.wrapper}>\r\n                <article className={styles.container} style={fieldWidth}>\r\n                    {cells}\r\n                </article>\r\n                <Settings setField={setFieldSize} setTheme={setTheme}/>\r\n            </section>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default FieldGameView;","import React, {useRef, useState} from 'react';\r\nimport colorCreator from \"../../utils/colorCreator\";\r\nimport audioPlayer from \"../../utils/AudioPlayer\";\r\nimport FieldGameView from \"./FieldGameView\";\r\n\r\nfunction FieldGame(props) {\r\n    const audioElRef = useRef(null);\r\n    const [data, setData] = useState([]);\r\n    // const [isButtonPressed, pressButton] = useState(false);\r\n    const [fieldSize, setFieldSize] = useState('');\r\n    const [theme, setTheme] = useState('');\r\n\r\n    const newData = (fieldSize === '55') ? data.slice(0, 25) : (fieldSize === '102') ?\r\n        data.slice(0, 20) : data.slice(0, 144);\r\n\r\n    let setMusic = async (e) => {\r\n        let file = e.target.files[0];\r\n        if (!file) return;\r\n\r\n        audioPlayer.setFileAndPlay(audioElRef.current, file);\r\n        let {analyser, dataArray} = audioPlayer.createAnalyser(audioElRef.current, file);\r\n\r\n        renderFrame();\r\n\r\n        function renderFrame() {\r\n            requestAnimationFrame(renderFrame);\r\n            analyser.getByteFrequencyData(dataArray);\r\n            setData(Array.from(dataArray))\r\n        }\r\n    };\r\n\r\n    let fieldWidth = colorCreator.getFieldStyle(+fieldSize)\r\n\r\n    return (\r\n        <FieldGameView audioElRef={audioElRef}\r\n                       fieldWidth={fieldWidth}\r\n                       setFieldSize={setFieldSize}\r\n                       setMusic={setMusic}\r\n                       setTheme={setTheme}\r\n                       theme={theme}\r\n                       newData={newData}\r\n        />\r\n    );\r\n}\r\n\r\nexport default FieldGame;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport FieldGame from \"./components/FieldGame/FieldGame\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <FieldGame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const START_PLAY_MUSIC = 'START_PLAY_MUSIC';\r\n\r\nconst initialState = {\r\n\r\n// const shuffle = (arr) => {\r\n//     for(let i = 0; i<arr.length; i++) {\r\n//         const random = Math.floor(Math.random() * arr.length)\r\n//         const temp = arr[i];\r\n//         arr[i] = arr[random];\r\n//         arr[random] = temp;\r\n//     }\r\n//     return arr\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        // case START_GAME:\r\n        //     let newStartArray = shuffle(state.questions.map(el => ({...el, answers: shuffle([...el.answers])})));\r\n        //     newStartArray[0].visible = true;\r\n        //     return {\r\n        //         ...state,\r\n        //     };\r\n        case START_PLAY_MUSIC:\r\n            let newOpacityElement = (num) => {\r\n                return  Math.floor(Math.random() * num)\r\n            };\r\n            let newArray = state.colors.map(el => {\r\n                return {\r\n                    ...el,\r\n                    brightness: Math.random(),\r\n                    color: state.arrayColors[newOpacityElement(state.arrayColors.length-1)]\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                colors: newArray,\r\n                isMusicPlay: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const startPlayMusic = () => ({type: START_PLAY_MUSIC});\r\n\r\nexport default reducer;","import {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    main: reducer}\r\n);\r\n\r\nlet store = createStore(reducers, applyMiddleware());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"FieldGame_wrapper__3sQcg\",\"container\":\"FieldGame_container__uscdW\",\"audio\":\"FieldGame_audio__1k6_D\",\"input\":\"FieldGame_input__2E8nk\",\"block\":\"FieldGame_block__1BHYD\",\"cell\":\"FieldGame_cell__16CUM\"};"],"sourceRoot":""}